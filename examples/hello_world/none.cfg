FEATURES {
    STARTADDRESS: default = $8000;
}
SYMBOLS {
    __LOADADDR__:   type = import;
    __STACKSIZE__:  type = weak, value = $00FF; # 255 byte stack
    __STACKSTART__: type = weak, value = $0100;
    __ZPSTART__:    type = weak, value = $0000;
}
MEMORY {
    ZP:       file = "", define = yes, start = $0000,  size = $001F;
    IO:       file = "", define = yes, start = $6000,  size = $2000,     fill = yes, type = rw;
    MAIN:     file = %O, define = yes, start = $8000,  size = $8000 - 4, fill = yes, type = ro;
    RAM:                 define = yes, start = $0200,  size = $3DFF;
    LOADADDR: file = %O,               start = %S - 2, size = $0004,     fill = yes;
    END:      file = "",               start = $F000,  size = $0FFF;
}
SEGMENTS {
    ZEROPAGE: load = ZP,   type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    STARTUP:  load = END, type = ro,  optional = yes;
    ONCE:     load = MAIN, type = ro,  optional = yes;
    DATA:     load = MAIN, type = rw,  define   = yes, run = RAM;
    CODE:     load = MAIN, type = ro;
    RODATA:   load = MAIN, type = ro;
    INIT:     load = MAIN, type = ro;
    HEAP:     load = RAM,  type = bss, optional = yes;
    BSS:      load = RAM,  type = bss, define   = yes;
}
FEATURES {
    CONDES: type    = constructor,
        label   = __CONSTRUCTOR_TABLE__,
        count   = __CONSTRUCTOR_COUNT__,
        segment = ONCE;
    CONDES: type    = destructor,
        label   = __DESTRUCTOR_TABLE__,
        count   = __DESTRUCTOR_COUNT__,
        segment = RODATA;
    CONDES: type    = interruptor,
        label   = __INTERRUPTOR_TABLE__,
        count   = __INTERRUPTOR_COUNT__,
        segment = RODATA,
        import  = __CALLIRQ__;
}
